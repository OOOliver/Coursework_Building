/*
 * generated by Xtext 2.20.0
 */
package kcl.ac.uk.jian.building.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class BuildingGrammarAccess extends AbstractGrammarElementFinder {
	
	public class BuildingProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.ac.uk.jian.building.Building.BuildingProgram");
		private final Assignment cProcessesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cProcessesProcessParserRuleCall_0 = (RuleCall)cProcessesAssignment.eContents().get(0);
		
		//BuildingProgram:
		//	processes+=Process*;
		@Override public ParserRule getRule() { return rule; }
		
		//processes+=Process*
		public Assignment getProcessesAssignment() { return cProcessesAssignment; }
		
		//Process
		public RuleCall getProcessesProcessParserRuleCall_0() { return cProcessesProcessParserRuleCall_0; }
	}
	public class ProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.ac.uk.jian.building.Building.Process");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAddFloorProcessParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPaintProcessParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAddWindowProcessParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVariableDeclarationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLoopParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Process:
		//	AddFloorProcess | PaintProcess | AddWindowProcess | VariableDeclaration | Loop;
		@Override public ParserRule getRule() { return rule; }
		
		//AddFloorProcess | PaintProcess | AddWindowProcess | VariableDeclaration | Loop
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AddFloorProcess
		public RuleCall getAddFloorProcessParserRuleCall_0() { return cAddFloorProcessParserRuleCall_0; }
		
		//PaintProcess
		public RuleCall getPaintProcessParserRuleCall_1() { return cPaintProcessParserRuleCall_1; }
		
		//AddWindowProcess
		public RuleCall getAddWindowProcessParserRuleCall_2() { return cAddWindowProcessParserRuleCall_2; }
		
		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_3() { return cVariableDeclarationParserRuleCall_3; }
		
		//Loop
		public RuleCall getLoopParserRuleCall_4() { return cLoopParserRuleCall_4; }
	}
	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.ac.uk.jian.building.Building.VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueINTTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//VariableDeclaration:
		//	"var" name=ID "=" value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//"var" name=ID "=" value=INT
		public Group getGroup() { return cGroup; }
		
		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//value=INT
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_3_0() { return cValueINTTerminalRuleCall_3_0; }
	}
	public class AddFloorProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.ac.uk.jian.building.Building.AddFloorProcess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStructureAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStructureWholeStructureEnumRuleCall_0_0 = (RuleCall)cStructureAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLevelsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLevelsAdditionParserRuleCall_2_0 = (RuleCall)cLevelsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AddFloorProcess:
		//	structure=WholeStructure "(" levels=Addition ")";
		@Override public ParserRule getRule() { return rule; }
		
		//structure=WholeStructure "(" levels=Addition ")"
		public Group getGroup() { return cGroup; }
		
		//structure=WholeStructure
		public Assignment getStructureAssignment_0() { return cStructureAssignment_0; }
		
		//WholeStructure
		public RuleCall getStructureWholeStructureEnumRuleCall_0_0() { return cStructureWholeStructureEnumRuleCall_0_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//levels=Addition
		public Assignment getLevelsAssignment_2() { return cLevelsAssignment_2; }
		
		//Addition
		public RuleCall getLevelsAdditionParserRuleCall_2_0() { return cLevelsAdditionParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class PaintProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.ac.uk.jian.building.Building.PaintProcess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPaintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTheKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLevelsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLevelsAdditionParserRuleCall_3_0 = (RuleCall)cLevelsAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cFloorKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cColorAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cColorIDTerminalRuleCall_6_0 = (RuleCall)cColorAssignment_6.eContents().get(0);
		
		//PaintProcess:
		//	'paint' 'the' '[' levels=Addition ']' 'floor' color=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'paint' 'the' '[' levels=Addition ']' 'floor' color=ID
		public Group getGroup() { return cGroup; }
		
		//'paint'
		public Keyword getPaintKeyword_0() { return cPaintKeyword_0; }
		
		//'the'
		public Keyword getTheKeyword_1() { return cTheKeyword_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//levels=Addition
		public Assignment getLevelsAssignment_3() { return cLevelsAssignment_3; }
		
		//Addition
		public RuleCall getLevelsAdditionParserRuleCall_3_0() { return cLevelsAdditionParserRuleCall_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
		
		//'floor'
		public Keyword getFloorKeyword_5() { return cFloorKeyword_5; }
		
		//color=ID
		public Assignment getColorAssignment_6() { return cColorAssignment_6; }
		
		//ID
		public RuleCall getColorIDTerminalRuleCall_6_0() { return cColorIDTerminalRuleCall_6_0; }
	}
	public class AddWindowProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.ac.uk.jian.building.Building.AddWindowProcess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNumAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNumAdditionParserRuleCall_1_0 = (RuleCall)cNumAssignment_1.eContents().get(0);
		private final Keyword cWindowsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLevelsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLevelsAdditionParserRuleCall_5_0 = (RuleCall)cLevelsAssignment_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cFloorKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//AddWindowProcess:
		//	'add' num=Addition 'windows' 'to' '[' levels=Addition ']' 'floor';
		@Override public ParserRule getRule() { return rule; }
		
		//'add' num=Addition 'windows' 'to' '[' levels=Addition ']' 'floor'
		public Group getGroup() { return cGroup; }
		
		//'add'
		public Keyword getAddKeyword_0() { return cAddKeyword_0; }
		
		//num=Addition
		public Assignment getNumAssignment_1() { return cNumAssignment_1; }
		
		//Addition
		public RuleCall getNumAdditionParserRuleCall_1_0() { return cNumAdditionParserRuleCall_1_0; }
		
		//'windows'
		public Keyword getWindowsKeyword_2() { return cWindowsKeyword_2; }
		
		//'to'
		public Keyword getToKeyword_3() { return cToKeyword_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }
		
		//levels=Addition
		public Assignment getLevelsAssignment_5() { return cLevelsAssignment_5; }
		
		//Addition
		public RuleCall getLevelsAdditionParserRuleCall_5_0() { return cLevelsAdditionParserRuleCall_5_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
		
		//'floor'
		public Keyword getFloorKeyword_7() { return cFloorKeyword_7; }
	}
	public class LoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.ac.uk.jian.building.Building.Loop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCountAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCountAdditionParserRuleCall_0_0 = (RuleCall)cCountAssignment_0.eContents().get(0);
		private final Keyword cTimesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cProcessesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProcessesProcessParserRuleCall_3_0 = (RuleCall)cProcessesAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Loop:
		//	count=Addition "times" "do"
		//	processes+=Process+
		//	"end";
		@Override public ParserRule getRule() { return rule; }
		
		//count=Addition "times" "do" processes+=Process+ "end"
		public Group getGroup() { return cGroup; }
		
		//count=Addition
		public Assignment getCountAssignment_0() { return cCountAssignment_0; }
		
		//Addition
		public RuleCall getCountAdditionParserRuleCall_0_0() { return cCountAdditionParserRuleCall_0_0; }
		
		//"times"
		public Keyword getTimesKeyword_1() { return cTimesKeyword_1; }
		
		//"do"
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }
		
		//processes+=Process+
		public Assignment getProcessesAssignment_3() { return cProcessesAssignment_3; }
		
		//Process
		public RuleCall getProcessesProcessParserRuleCall_3_0() { return cProcessesProcessParserRuleCall_3_0; }
		
		//"end"
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}
	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.ac.uk.jian.building.Building.Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAdditionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorPlusSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorHyphenMinusKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplicationParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Addition Expression:
		//	Multiplication ({Addition.left=current} operator+=("+" | "-") right+=Multiplication)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Multiplication ({Addition.left=current} operator+=("+" | "-") right+=Multiplication)*
		public Group getGroup() { return cGroup; }
		
		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }
		
		//({Addition.left=current} operator+=("+" | "-") right+=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Addition.left=current}
		public Action getAdditionLeftAction_1_0() { return cAdditionLeftAction_1_0; }
		
		//operator+=("+" | "-")
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//("+" | "-")
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//"+"
		public Keyword getOperatorPlusSignKeyword_1_1_0_0() { return cOperatorPlusSignKeyword_1_1_0_0; }
		
		//"-"
		public Keyword getOperatorHyphenMinusKeyword_1_1_0_1() { return cOperatorHyphenMinusKeyword_1_1_0_1; }
		
		//right+=Multiplication
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_2_0() { return cRightMultiplicationParserRuleCall_1_2_0; }
	}
	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.ac.uk.jian.building.Building.Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultiplicationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorAsteriskKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorSolidusKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Multiplication Expression:
		//	Primary ({Multiplication.left=current} operator+=("*" | "/") right+=Primary)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary ({Multiplication.left=current} operator+=("*" | "/") right+=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({Multiplication.left=current} operator+=("*" | "/") right+=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Multiplication.left=current}
		public Action getMultiplicationLeftAction_1_0() { return cMultiplicationLeftAction_1_0; }
		
		//operator+=("*" | "/")
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//("*" | "/")
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//"*"
		public Keyword getOperatorAsteriskKeyword_1_1_0_0() { return cOperatorAsteriskKeyword_1_1_0_0; }
		
		//"/"
		public Keyword getOperatorSolidusKeyword_1_1_0_1() { return cOperatorSolidusKeyword_1_1_0_1; }
		
		//right+=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.ac.uk.jian.building.Building.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntVarExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRealLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cAdditionParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//Primary Expression:
		//	IntLiteral | IntVarExpression | RealLiteral |
		//	"(" Addition ")";
		@Override public ParserRule getRule() { return rule; }
		
		//IntLiteral | IntVarExpression | RealLiteral | "(" Addition ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntLiteral
		public RuleCall getIntLiteralParserRuleCall_0() { return cIntLiteralParserRuleCall_0; }
		
		//IntVarExpression
		public RuleCall getIntVarExpressionParserRuleCall_1() { return cIntVarExpressionParserRuleCall_1; }
		
		//RealLiteral
		public RuleCall getRealLiteralParserRuleCall_2() { return cRealLiteralParserRuleCall_2; }
		
		//"(" Addition ")"
		public Group getGroup_3() { return cGroup_3; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//Addition
		public RuleCall getAdditionParserRuleCall_3_1() { return cAdditionParserRuleCall_3_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}
	public class IntLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.ac.uk.jian.building.Building.IntLiteral");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValINTTerminalRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//IntLiteral:
		//	val=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//val=INT
		public Assignment getValAssignment() { return cValAssignment; }
		
		//INT
		public RuleCall getValINTTerminalRuleCall_0() { return cValINTTerminalRuleCall_0; }
	}
	public class RealLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.ac.uk.jian.building.Building.RealLiteral");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValREALParserRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//RealLiteral:
		//	val=REAL;
		@Override public ParserRule getRule() { return rule; }
		
		//val=REAL
		public Assignment getValAssignment() { return cValAssignment; }
		
		//REAL
		public RuleCall getValREALParserRuleCall_0() { return cValREALParserRuleCall_0; }
	}
	public class IntVarExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.ac.uk.jian.building.Building.IntVarExpression");
		private final Assignment cVarAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVarVariableDeclarationCrossReference_0 = (CrossReference)cVarAssignment.eContents().get(0);
		private final RuleCall cVarVariableDeclarationIDTerminalRuleCall_0_1 = (RuleCall)cVarVariableDeclarationCrossReference_0.eContents().get(1);
		
		//IntVarExpression:
		//	var=[VariableDeclaration];
		@Override public ParserRule getRule() { return rule; }
		
		//var=[VariableDeclaration]
		public Assignment getVarAssignment() { return cVarAssignment; }
		
		//[VariableDeclaration]
		public CrossReference getVarVariableDeclarationCrossReference_0() { return cVarVariableDeclarationCrossReference_0; }
		
		//ID
		public RuleCall getVarVariableDeclarationIDTerminalRuleCall_0_1() { return cVarVariableDeclarationIDTerminalRuleCall_0_1; }
	}
	public class REALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.ac.uk.jian.building.Building.REAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//REAL ecore::EFloat hidden():
		//	INT? "." INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT? "." INT
		public Group getGroup() { return cGroup; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	
	public class WholeStructureElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.ac.uk.jian.building.Building.WholeStructure");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAbovegroundEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAbovegroundAbovegroundKeyword_0_0 = (Keyword)cAbovegroundEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cUndergroundEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cUndergroundUndergroundKeyword_1_0 = (Keyword)cUndergroundEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum WholeStructure:
		//	aboveground | underground;
		public EnumRule getRule() { return rule; }
		
		//aboveground | underground
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//aboveground
		public EnumLiteralDeclaration getAbovegroundEnumLiteralDeclaration_0() { return cAbovegroundEnumLiteralDeclaration_0; }
		
		//"aboveground"
		public Keyword getAbovegroundAbovegroundKeyword_0_0() { return cAbovegroundAbovegroundKeyword_0_0; }
		
		//underground
		public EnumLiteralDeclaration getUndergroundEnumLiteralDeclaration_1() { return cUndergroundEnumLiteralDeclaration_1; }
		
		//"underground"
		public Keyword getUndergroundUndergroundKeyword_1_0() { return cUndergroundUndergroundKeyword_1_0; }
	}
	
	private final BuildingProgramElements pBuildingProgram;
	private final ProcessElements pProcess;
	private final VariableDeclarationElements pVariableDeclaration;
	private final AddFloorProcessElements pAddFloorProcess;
	private final WholeStructureElements eWholeStructure;
	private final PaintProcessElements pPaintProcess;
	private final AddWindowProcessElements pAddWindowProcess;
	private final LoopElements pLoop;
	private final AdditionElements pAddition;
	private final MultiplicationElements pMultiplication;
	private final PrimaryElements pPrimary;
	private final IntLiteralElements pIntLiteral;
	private final RealLiteralElements pRealLiteral;
	private final IntVarExpressionElements pIntVarExpression;
	private final REALElements pREAL;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BuildingGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pBuildingProgram = new BuildingProgramElements();
		this.pProcess = new ProcessElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.pAddFloorProcess = new AddFloorProcessElements();
		this.eWholeStructure = new WholeStructureElements();
		this.pPaintProcess = new PaintProcessElements();
		this.pAddWindowProcess = new AddWindowProcessElements();
		this.pLoop = new LoopElements();
		this.pAddition = new AdditionElements();
		this.pMultiplication = new MultiplicationElements();
		this.pPrimary = new PrimaryElements();
		this.pIntLiteral = new IntLiteralElements();
		this.pRealLiteral = new RealLiteralElements();
		this.pIntVarExpression = new IntVarExpressionElements();
		this.pREAL = new REALElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("kcl.ac.uk.jian.building.Building".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//BuildingProgram:
	//	processes+=Process*;
	public BuildingProgramElements getBuildingProgramAccess() {
		return pBuildingProgram;
	}
	
	public ParserRule getBuildingProgramRule() {
		return getBuildingProgramAccess().getRule();
	}
	
	//Process:
	//	AddFloorProcess | PaintProcess | AddWindowProcess | VariableDeclaration | Loop;
	public ProcessElements getProcessAccess() {
		return pProcess;
	}
	
	public ParserRule getProcessRule() {
		return getProcessAccess().getRule();
	}
	
	//VariableDeclaration:
	//	"var" name=ID "=" value=INT;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//AddFloorProcess:
	//	structure=WholeStructure "(" levels=Addition ")";
	public AddFloorProcessElements getAddFloorProcessAccess() {
		return pAddFloorProcess;
	}
	
	public ParserRule getAddFloorProcessRule() {
		return getAddFloorProcessAccess().getRule();
	}
	
	//enum WholeStructure:
	//	aboveground | underground;
	public WholeStructureElements getWholeStructureAccess() {
		return eWholeStructure;
	}
	
	public EnumRule getWholeStructureRule() {
		return getWholeStructureAccess().getRule();
	}
	
	//PaintProcess:
	//	'paint' 'the' '[' levels=Addition ']' 'floor' color=ID;
	public PaintProcessElements getPaintProcessAccess() {
		return pPaintProcess;
	}
	
	public ParserRule getPaintProcessRule() {
		return getPaintProcessAccess().getRule();
	}
	
	//AddWindowProcess:
	//	'add' num=Addition 'windows' 'to' '[' levels=Addition ']' 'floor';
	public AddWindowProcessElements getAddWindowProcessAccess() {
		return pAddWindowProcess;
	}
	
	public ParserRule getAddWindowProcessRule() {
		return getAddWindowProcessAccess().getRule();
	}
	
	//Loop:
	//	count=Addition "times" "do"
	//	processes+=Process+
	//	"end";
	public LoopElements getLoopAccess() {
		return pLoop;
	}
	
	public ParserRule getLoopRule() {
		return getLoopAccess().getRule();
	}
	
	//Addition Expression:
	//	Multiplication ({Addition.left=current} operator+=("+" | "-") right+=Multiplication)*;
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}
	
	//Multiplication Expression:
	//	Primary ({Multiplication.left=current} operator+=("*" | "/") right+=Primary)*;
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}
	
	//Primary Expression:
	//	IntLiteral | IntVarExpression | RealLiteral |
	//	"(" Addition ")";
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//IntLiteral:
	//	val=INT;
	public IntLiteralElements getIntLiteralAccess() {
		return pIntLiteral;
	}
	
	public ParserRule getIntLiteralRule() {
		return getIntLiteralAccess().getRule();
	}
	
	//RealLiteral:
	//	val=REAL;
	public RealLiteralElements getRealLiteralAccess() {
		return pRealLiteral;
	}
	
	public ParserRule getRealLiteralRule() {
		return getRealLiteralAccess().getRule();
	}
	
	//IntVarExpression:
	//	var=[VariableDeclaration];
	public IntVarExpressionElements getIntVarExpressionAccess() {
		return pIntVarExpression;
	}
	
	public ParserRule getIntVarExpressionRule() {
		return getIntVarExpressionAccess().getRule();
	}
	
	//REAL ecore::EFloat hidden():
	//	INT? "." INT;
	public REALElements getREALAccess() {
		return pREAL;
	}
	
	public ParserRule getREALRule() {
		return getREALAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
