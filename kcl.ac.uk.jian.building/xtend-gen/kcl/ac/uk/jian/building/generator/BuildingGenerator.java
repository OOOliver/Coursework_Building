/**
 * generated by Xtext 2.20.0
 */
package kcl.ac.uk.jian.building.generator;

import java.util.Arrays;
import kcl.ac.uk.jian.building.building.AddFloorProcess;
import kcl.ac.uk.jian.building.building.AddWindowProcess;
import kcl.ac.uk.jian.building.building.BuildingProgram;
import kcl.ac.uk.jian.building.building.Expression;
import kcl.ac.uk.jian.building.building.IntLiteral;
import kcl.ac.uk.jian.building.building.PaintProcess;
import kcl.ac.uk.jian.building.building.RealLiteral;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class BuildingGenerator extends AbstractGenerator {
  private static class Environment {
    private int counter = 0;
    
    public CharSequence getFreshVarName() {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("i");
      int _plusPlus = this.counter++;
      _builder.append(_plusPlus);
      return _builder;
    }
    
    public int exit() {
      return this.counter--;
    }
  }
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _head = IterableExtensions.<EObject>head(resource.getContents());
    final BuildingProgram model = ((BuildingProgram) _head);
    final String className = this.deriveClassNameFor(resource);
    fsa.generateFile((className + ".java"), this.doGenerateClass(model, className));
  }
  
  public String deriveClassNameFor(final Resource resource) {
    String _xblockexpression = null;
    {
      final String origName = resource.getURI().lastSegment();
      String _firstUpper = StringExtensions.toFirstUpper(origName.substring(0, origName.indexOf(".")));
      _xblockexpression = (_firstUpper + "Building");
    }
    return _xblockexpression;
  }
  
  public String doGenerateClass(final BuildingProgram program, final String className) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.awt.Color;");
    _builder.newLine();
    _builder.append("import java.awt.Graphics;");
    _builder.newLine();
    _builder.append("import java.awt.Polygon;");
    _builder.newLine();
    _builder.append("import java.util.Map;");
    _builder.newLine();
    _builder.append("import java.util.HashMap;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.swing.JComponent;");
    _builder.newLine();
    _builder.append("import javax.swing.JFrame;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    _builder.append(className);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("public static void main(String[] args) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JFrame window = new JFrame();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("window.setSize(1000, 1000);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Picture pic = new Picture();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("window.add(pic);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("window.setVisible(true);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("class Picture extends JComponent{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected void paintComponent(Graphics g) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("g.setColor(Color.green);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Polygon p = new Polygon();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int height = 50, width = 250;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int x = 380, y = 450;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int offset = 30;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("p.addPoint(x, y);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("p.addPoint(x - offset, y + height);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("p.addPoint(x + width - offset, y + height);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("p.addPoint(x + width, y);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("g.fillPolygon(p);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("structure s = new structure();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("g.setColor(Color.black);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("g.fillRect(460, 470, 60, 30);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("g.setColor(Color.gray);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("g.drawLine(460, 500, 520, 500);");
    _builder.newLine();
    _builder.append("\t\t");
    final Function1<kcl.ac.uk.jian.building.building.Process, String> _function = (kcl.ac.uk.jian.building.building.Process it) -> {
      BuildingGenerator.Environment _environment = new BuildingGenerator.Environment();
      return this.generateJavaStatement(it, _environment);
    };
    String _join = IterableExtensions.join(ListExtensions.<kcl.ac.uk.jian.building.building.Process, String>map(program.getProcesses(), _function), "\n");
    _builder.append(_join, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("g.setColor(Color.cyan);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("g.fillRect(490, 480, 10, 20);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("g.setColor(Color.yellow);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("g.fillRect(470, 480, 10, 10);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(int i = 0; i <= s.getAbove(); i++){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("g.setColor(Color.yellow);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("g.fillRect(470, 480 - 30 * i, 10, 10);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("g.setColor(Color.gray);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("g.drawLine(460, 500 - 30 * i, 520, 500 - 30 * i);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(int i = 0; i <= s.getUnder(); i++){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("g.setColor(Color.yellow);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("g.fillRect(470, 480 + 30 * i, 10, 10);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("g.setColor(Color.gray);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("g.drawLine(460, 500 + 30 * i, 520, 500 + 30 * i);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Map extraWindow = s.getExtraWindow();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(int i = -s.getUnder(); i <= s.getAbove(); i++) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(extraWindow.containsKey(i)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("int windows = Integer.parseInt(extraWindow.get(i).toString());");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("g.setColor(Color.yellow);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("for(int j = 1; j <= windows; j++){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("g.fillRect(470 + 20 * j, 480 - 30 * i, 10, 10);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("class structure{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int above;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int under;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Map extraWindow = new HashMap();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("void setAbove(int above) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.above = above;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int getAbove() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return this.above;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("void setUnder(int under) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.under = under;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int getUnder() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return this.under;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("void addExtraWindow(int floor, int extra) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.extraWindow.put(floor, extra);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Map getExtraWindow() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return this.extraWindow;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  protected String _generateJavaStatement(final Process proce, final BuildingGenerator.Environment env) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder.toString();
  }
  
  protected String _generateJavaStatement(final AddFloorProcess proce, final BuildingGenerator.Environment env) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("g.setColor(Color.black);");
    _builder.newLine();
    _builder.append("if(\"");
    String _lowerCase = proce.getStructure().getName().toLowerCase();
    _builder.append(_lowerCase);
    _builder.append("\".equals(\"aboveground\")){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("s.setAbove(");
    String _generateJavaExpression = this.generateJavaExpression(proce.getLevels());
    _builder.append(_generateJavaExpression, "\t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("g.fillRect(460, 470 - 30 * ");
    String _generateJavaExpression_1 = this.generateJavaExpression(proce.getLevels());
    _builder.append(_generateJavaExpression_1, "\t");
    _builder.append(", 60, 30 * ");
    String _generateJavaExpression_2 = this.generateJavaExpression(proce.getLevels());
    _builder.append(_generateJavaExpression_2, "\t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    _builder.append("else if(\"");
    String _lowerCase_1 = proce.getStructure().getName().toLowerCase();
    _builder.append(_lowerCase_1);
    _builder.append("\".equals(\"underground\")){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("s.setUnder(");
    String _generateJavaExpression_3 = this.generateJavaExpression(proce.getLevels());
    _builder.append(_generateJavaExpression_3, "\t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("g.fillRect(460, 470 + 30, 60, 30 * ");
    String _generateJavaExpression_4 = this.generateJavaExpression(proce.getLevels());
    _builder.append(_generateJavaExpression_4, "\t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  protected String _generateJavaStatement(final PaintProcess proce, final BuildingGenerator.Environment env) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("g.setColor(Color.");
    String _lowerCase = proce.getColor().toLowerCase();
    _builder.append(_lowerCase);
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("g.fillRect(460, 470 - 30 * ");
    String _generateJavaExpression = this.generateJavaExpression(proce.getLevels());
    _builder.append(_generateJavaExpression);
    _builder.append(", 60, 30);");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  protected String _generateJavaStatement(final AddWindowProcess proce, final BuildingGenerator.Environment env) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("s.addExtraWindow(");
    String _generateJavaExpression = this.generateJavaExpression(proce.getLevels());
    _builder.append(_generateJavaExpression);
    _builder.append(",");
    String _generateJavaExpression_1 = this.generateJavaExpression(proce.getNum());
    _builder.append(_generateJavaExpression_1);
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  protected String _generateJavaExpression(final Expression exp) {
    return null;
  }
  
  protected String _generateJavaExpression(final IntLiteral exp) {
    StringConcatenation _builder = new StringConcatenation();
    int _val = exp.getVal();
    _builder.append(_val);
    return _builder.toString();
  }
  
  protected String _generateJavaExpression(final RealLiteral exp) {
    StringConcatenation _builder = new StringConcatenation();
    float _val = exp.getVal();
    _builder.append(_val);
    _builder.append("f");
    return _builder.toString();
  }
  
  public String generateJavaStatement(final Object proce, final BuildingGenerator.Environment env) {
    if (proce instanceof AddFloorProcess) {
      return _generateJavaStatement((AddFloorProcess)proce, env);
    } else if (proce instanceof AddWindowProcess) {
      return _generateJavaStatement((AddWindowProcess)proce, env);
    } else if (proce instanceof PaintProcess) {
      return _generateJavaStatement((PaintProcess)proce, env);
    } else if (proce instanceof Process) {
      return _generateJavaStatement((Process)proce, env);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(proce, env).toString());
    }
  }
  
  public String generateJavaExpression(final Expression exp) {
    if (exp instanceof IntLiteral) {
      return _generateJavaExpression((IntLiteral)exp);
    } else if (exp instanceof RealLiteral) {
      return _generateJavaExpression((RealLiteral)exp);
    } else if (exp != null) {
      return _generateJavaExpression(exp);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(exp).toString());
    }
  }
}
