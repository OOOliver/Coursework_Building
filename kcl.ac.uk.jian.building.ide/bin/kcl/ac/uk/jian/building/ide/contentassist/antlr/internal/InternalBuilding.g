/*
 * generated by Xtext 2.20.0
 */
grammar InternalBuilding;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package kcl.ac.uk.jian.building.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package kcl.ac.uk.jian.building.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import kcl.ac.uk.jian.building.services.BuildingGrammarAccess;

}
@parser::members {
	private BuildingGrammarAccess grammarAccess;

	public void setGrammarAccess(BuildingGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleBuildingProgram
entryRuleBuildingProgram
:
{ before(grammarAccess.getBuildingProgramRule()); }
	 ruleBuildingProgram
{ after(grammarAccess.getBuildingProgramRule()); } 
	 EOF 
;

// Rule BuildingProgram
ruleBuildingProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBuildingProgramAccess().getProcessesAssignment()); }
		(rule__BuildingProgram__ProcessesAssignment)*
		{ after(grammarAccess.getBuildingProgramAccess().getProcessesAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProcess
entryRuleProcess
:
{ before(grammarAccess.getProcessRule()); }
	 ruleProcess
{ after(grammarAccess.getProcessRule()); } 
	 EOF 
;

// Rule Process
ruleProcess 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProcessAccess().getAlternatives()); }
		(rule__Process__Alternatives)
		{ after(grammarAccess.getProcessAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration
:
{ before(grammarAccess.getVariableDeclarationRule()); }
	 ruleVariableDeclaration
{ after(grammarAccess.getVariableDeclarationRule()); } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getGroup()); }
		(rule__VariableDeclaration__Group__0)
		{ after(grammarAccess.getVariableDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAddFloorProcess
entryRuleAddFloorProcess
:
{ before(grammarAccess.getAddFloorProcessRule()); }
	 ruleAddFloorProcess
{ after(grammarAccess.getAddFloorProcessRule()); } 
	 EOF 
;

// Rule AddFloorProcess
ruleAddFloorProcess 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAddFloorProcessAccess().getGroup()); }
		(rule__AddFloorProcess__Group__0)
		{ after(grammarAccess.getAddFloorProcessAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePaintProcess
entryRulePaintProcess
:
{ before(grammarAccess.getPaintProcessRule()); }
	 rulePaintProcess
{ after(grammarAccess.getPaintProcessRule()); } 
	 EOF 
;

// Rule PaintProcess
rulePaintProcess 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPaintProcessAccess().getGroup()); }
		(rule__PaintProcess__Group__0)
		{ after(grammarAccess.getPaintProcessAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAddWindowProcess
entryRuleAddWindowProcess
:
{ before(grammarAccess.getAddWindowProcessRule()); }
	 ruleAddWindowProcess
{ after(grammarAccess.getAddWindowProcessRule()); } 
	 EOF 
;

// Rule AddWindowProcess
ruleAddWindowProcess 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAddWindowProcessAccess().getGroup()); }
		(rule__AddWindowProcess__Group__0)
		{ after(grammarAccess.getAddWindowProcessAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLoop
entryRuleLoop
:
{ before(grammarAccess.getLoopRule()); }
	 ruleLoop
{ after(grammarAccess.getLoopRule()); } 
	 EOF 
;

// Rule Loop
ruleLoop 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLoopAccess().getGroup()); }
		(rule__Loop__Group__0)
		{ after(grammarAccess.getLoopAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAddition
entryRuleAddition
:
{ before(grammarAccess.getAdditionRule()); }
	 ruleAddition
{ after(grammarAccess.getAdditionRule()); } 
	 EOF 
;

// Rule Addition
ruleAddition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAdditionAccess().getGroup()); }
		(rule__Addition__Group__0)
		{ after(grammarAccess.getAdditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiplication
entryRuleMultiplication
:
{ before(grammarAccess.getMultiplicationRule()); }
	 ruleMultiplication
{ after(grammarAccess.getMultiplicationRule()); } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiplicationAccess().getGroup()); }
		(rule__Multiplication__Group__0)
		{ after(grammarAccess.getMultiplicationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimary
entryRulePrimary
:
{ before(grammarAccess.getPrimaryRule()); }
	 rulePrimary
{ after(grammarAccess.getPrimaryRule()); } 
	 EOF 
;

// Rule Primary
rulePrimary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryAccess().getAlternatives()); }
		(rule__Primary__Alternatives)
		{ after(grammarAccess.getPrimaryAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntLiteral
entryRuleIntLiteral
:
{ before(grammarAccess.getIntLiteralRule()); }
	 ruleIntLiteral
{ after(grammarAccess.getIntLiteralRule()); } 
	 EOF 
;

// Rule IntLiteral
ruleIntLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntLiteralAccess().getValAssignment()); }
		(rule__IntLiteral__ValAssignment)
		{ after(grammarAccess.getIntLiteralAccess().getValAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRealLiteral
entryRuleRealLiteral
:
{ before(grammarAccess.getRealLiteralRule()); }
	 ruleRealLiteral
{ after(grammarAccess.getRealLiteralRule()); } 
	 EOF 
;

// Rule RealLiteral
ruleRealLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRealLiteralAccess().getValAssignment()); }
		(rule__RealLiteral__ValAssignment)
		{ after(grammarAccess.getRealLiteralAccess().getValAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntVarExpression
entryRuleIntVarExpression
:
{ before(grammarAccess.getIntVarExpressionRule()); }
	 ruleIntVarExpression
{ after(grammarAccess.getIntVarExpressionRule()); } 
	 EOF 
;

// Rule IntVarExpression
ruleIntVarExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntVarExpressionAccess().getVarAssignment()); }
		(rule__IntVarExpression__VarAssignment)
		{ after(grammarAccess.getIntVarExpressionAccess().getVarAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleREAL
entryRuleREAL
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getREALRule()); }
	 ruleREAL
{ after(grammarAccess.getREALRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule REAL
ruleREAL 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getREALAccess().getGroup()); }
		(rule__REAL__Group__0)
		{ after(grammarAccess.getREALAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Rule WholeStructure
ruleWholeStructure
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWholeStructureAccess().getAlternatives()); }
		(rule__WholeStructure__Alternatives)
		{ after(grammarAccess.getWholeStructureAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcessAccess().getAddFloorProcessParserRuleCall_0()); }
		ruleAddFloorProcess
		{ after(grammarAccess.getProcessAccess().getAddFloorProcessParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getProcessAccess().getPaintProcessParserRuleCall_1()); }
		rulePaintProcess
		{ after(grammarAccess.getProcessAccess().getPaintProcessParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getProcessAccess().getAddWindowProcessParserRuleCall_2()); }
		ruleAddWindowProcess
		{ after(grammarAccess.getProcessAccess().getAddWindowProcessParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getProcessAccess().getVariableDeclarationParserRuleCall_3()); }
		ruleVariableDeclaration
		{ after(grammarAccess.getProcessAccess().getVariableDeclarationParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getProcessAccess().getLoopParserRuleCall_4()); }
		ruleLoop
		{ after(grammarAccess.getProcessAccess().getLoopParserRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__OperatorAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionAccess().getOperatorPlusSignKeyword_1_1_0_0()); }
		'+'
		{ after(grammarAccess.getAdditionAccess().getOperatorPlusSignKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAdditionAccess().getOperatorHyphenMinusKeyword_1_1_0_1()); }
		'-'
		{ after(grammarAccess.getAdditionAccess().getOperatorHyphenMinusKeyword_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__OperatorAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationAccess().getOperatorAsteriskKeyword_1_1_0_0()); }
		'*'
		{ after(grammarAccess.getMultiplicationAccess().getOperatorAsteriskKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplicationAccess().getOperatorSolidusKeyword_1_1_0_1()); }
		'/'
		{ after(grammarAccess.getMultiplicationAccess().getOperatorSolidusKeyword_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getIntLiteralParserRuleCall_0()); }
		ruleIntLiteral
		{ after(grammarAccess.getPrimaryAccess().getIntLiteralParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getIntVarExpressionParserRuleCall_1()); }
		ruleIntVarExpression
		{ after(grammarAccess.getPrimaryAccess().getIntVarExpressionParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getRealLiteralParserRuleCall_2()); }
		ruleRealLiteral
		{ after(grammarAccess.getPrimaryAccess().getRealLiteralParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getGroup_3()); }
		(rule__Primary__Group_3__0)
		{ after(grammarAccess.getPrimaryAccess().getGroup_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WholeStructure__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWholeStructureAccess().getAbovegroundEnumLiteralDeclaration_0()); }
		('aboveground')
		{ after(grammarAccess.getWholeStructureAccess().getAbovegroundEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getWholeStructureAccess().getUndergroundEnumLiteralDeclaration_1()); }
		('underground')
		{ after(grammarAccess.getWholeStructureAccess().getUndergroundEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__0__Impl
	rule__VariableDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getVarKeyword_0()); }
	'var'
	{ after(grammarAccess.getVariableDeclarationAccess().getVarKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__1__Impl
	rule__VariableDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1()); }
	(rule__VariableDeclaration__NameAssignment_1)
	{ after(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__2__Impl
	rule__VariableDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_2()); }
	'='
	{ after(grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getValueAssignment_3()); }
	(rule__VariableDeclaration__ValueAssignment_3)
	{ after(grammarAccess.getVariableDeclarationAccess().getValueAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AddFloorProcess__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddFloorProcess__Group__0__Impl
	rule__AddFloorProcess__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddFloorProcess__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddFloorProcessAccess().getStructureAssignment_0()); }
	(rule__AddFloorProcess__StructureAssignment_0)
	{ after(grammarAccess.getAddFloorProcessAccess().getStructureAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddFloorProcess__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddFloorProcess__Group__1__Impl
	rule__AddFloorProcess__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AddFloorProcess__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddFloorProcessAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getAddFloorProcessAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddFloorProcess__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddFloorProcess__Group__2__Impl
	rule__AddFloorProcess__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AddFloorProcess__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddFloorProcessAccess().getLevelsAssignment_2()); }
	(rule__AddFloorProcess__LevelsAssignment_2)
	{ after(grammarAccess.getAddFloorProcessAccess().getLevelsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddFloorProcess__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddFloorProcess__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddFloorProcess__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddFloorProcessAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getAddFloorProcessAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PaintProcess__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PaintProcess__Group__0__Impl
	rule__PaintProcess__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PaintProcess__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPaintProcessAccess().getPaintKeyword_0()); }
	'paint'
	{ after(grammarAccess.getPaintProcessAccess().getPaintKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PaintProcess__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PaintProcess__Group__1__Impl
	rule__PaintProcess__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PaintProcess__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPaintProcessAccess().getTheKeyword_1()); }
	'the'
	{ after(grammarAccess.getPaintProcessAccess().getTheKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PaintProcess__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PaintProcess__Group__2__Impl
	rule__PaintProcess__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PaintProcess__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPaintProcessAccess().getLeftSquareBracketKeyword_2()); }
	'['
	{ after(grammarAccess.getPaintProcessAccess().getLeftSquareBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PaintProcess__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PaintProcess__Group__3__Impl
	rule__PaintProcess__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PaintProcess__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPaintProcessAccess().getLevelsAssignment_3()); }
	(rule__PaintProcess__LevelsAssignment_3)
	{ after(grammarAccess.getPaintProcessAccess().getLevelsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PaintProcess__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PaintProcess__Group__4__Impl
	rule__PaintProcess__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__PaintProcess__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPaintProcessAccess().getRightSquareBracketKeyword_4()); }
	']'
	{ after(grammarAccess.getPaintProcessAccess().getRightSquareBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PaintProcess__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PaintProcess__Group__5__Impl
	rule__PaintProcess__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__PaintProcess__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPaintProcessAccess().getFloorKeyword_5()); }
	'floor'
	{ after(grammarAccess.getPaintProcessAccess().getFloorKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PaintProcess__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PaintProcess__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PaintProcess__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPaintProcessAccess().getColorAssignment_6()); }
	(rule__PaintProcess__ColorAssignment_6)
	{ after(grammarAccess.getPaintProcessAccess().getColorAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AddWindowProcess__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddWindowProcess__Group__0__Impl
	rule__AddWindowProcess__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddWindowProcess__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddWindowProcessAccess().getAddKeyword_0()); }
	'add'
	{ after(grammarAccess.getAddWindowProcessAccess().getAddKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddWindowProcess__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddWindowProcess__Group__1__Impl
	rule__AddWindowProcess__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AddWindowProcess__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddWindowProcessAccess().getNumAssignment_1()); }
	(rule__AddWindowProcess__NumAssignment_1)
	{ after(grammarAccess.getAddWindowProcessAccess().getNumAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddWindowProcess__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddWindowProcess__Group__2__Impl
	rule__AddWindowProcess__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AddWindowProcess__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddWindowProcessAccess().getWindowsKeyword_2()); }
	'windows'
	{ after(grammarAccess.getAddWindowProcessAccess().getWindowsKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddWindowProcess__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddWindowProcess__Group__3__Impl
	rule__AddWindowProcess__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AddWindowProcess__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddWindowProcessAccess().getToKeyword_3()); }
	'to'
	{ after(grammarAccess.getAddWindowProcessAccess().getToKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddWindowProcess__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddWindowProcess__Group__4__Impl
	rule__AddWindowProcess__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__AddWindowProcess__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddWindowProcessAccess().getLeftSquareBracketKeyword_4()); }
	'['
	{ after(grammarAccess.getAddWindowProcessAccess().getLeftSquareBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddWindowProcess__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddWindowProcess__Group__5__Impl
	rule__AddWindowProcess__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__AddWindowProcess__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddWindowProcessAccess().getLevelsAssignment_5()); }
	(rule__AddWindowProcess__LevelsAssignment_5)
	{ after(grammarAccess.getAddWindowProcessAccess().getLevelsAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddWindowProcess__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddWindowProcess__Group__6__Impl
	rule__AddWindowProcess__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__AddWindowProcess__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddWindowProcessAccess().getRightSquareBracketKeyword_6()); }
	']'
	{ after(grammarAccess.getAddWindowProcessAccess().getRightSquareBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddWindowProcess__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddWindowProcess__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddWindowProcess__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddWindowProcessAccess().getFloorKeyword_7()); }
	'floor'
	{ after(grammarAccess.getAddWindowProcessAccess().getFloorKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Loop__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__0__Impl
	rule__Loop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getCountAssignment_0()); }
	(rule__Loop__CountAssignment_0)
	{ after(grammarAccess.getLoopAccess().getCountAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__1__Impl
	rule__Loop__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getTimesKeyword_1()); }
	'times'
	{ after(grammarAccess.getLoopAccess().getTimesKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__2__Impl
	rule__Loop__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getDoKeyword_2()); }
	'do'
	{ after(grammarAccess.getLoopAccess().getDoKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__3__Impl
	rule__Loop__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getLoopAccess().getProcessesAssignment_3()); }
		(rule__Loop__ProcessesAssignment_3)
		{ after(grammarAccess.getLoopAccess().getProcessesAssignment_3()); }
	)
	(
		{ before(grammarAccess.getLoopAccess().getProcessesAssignment_3()); }
		(rule__Loop__ProcessesAssignment_3)*
		{ after(grammarAccess.getLoopAccess().getProcessesAssignment_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getEndKeyword_4()); }
	'end'
	{ after(grammarAccess.getLoopAccess().getEndKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group__0__Impl
	rule__Addition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
	ruleMultiplication
	{ after(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getGroup_1()); }
	(rule__Addition__Group_1__0)*
	{ after(grammarAccess.getAdditionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1__0__Impl
	rule__Addition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1__1__Impl
	rule__Addition__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getOperatorAssignment_1_1()); }
	(rule__Addition__OperatorAssignment_1_1)
	{ after(grammarAccess.getAdditionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getRightAssignment_1_2()); }
	(rule__Addition__RightAssignment_1_2)
	{ after(grammarAccess.getAdditionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group__0__Impl
	rule__Multiplication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getPrimaryParserRuleCall_0()); }
	rulePrimary
	{ after(grammarAccess.getMultiplicationAccess().getPrimaryParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getGroup_1()); }
	(rule__Multiplication__Group_1__0)*
	{ after(grammarAccess.getMultiplicationAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1__0__Impl
	rule__Multiplication__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0()); }
	()
	{ after(grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1__1__Impl
	rule__Multiplication__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getOperatorAssignment_1_1()); }
	(rule__Multiplication__OperatorAssignment_1_1)
	{ after(grammarAccess.getMultiplicationAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2()); }
	(rule__Multiplication__RightAssignment_1_2)
	{ after(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_3__0__Impl
	rule__Primary__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_3_0()); }
	'('
	{ after(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_3__1__Impl
	rule__Primary__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getAdditionParserRuleCall_3_1()); }
	ruleAddition
	{ after(grammarAccess.getPrimaryAccess().getAdditionParserRuleCall_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_3_2()); }
	')'
	{ after(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__REAL__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__REAL__Group__0__Impl
	rule__REAL__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getREALAccess().getINTTerminalRuleCall_0()); }
	(RULE_INT)?
	{ after(grammarAccess.getREALAccess().getINTTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__REAL__Group__1__Impl
	rule__REAL__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getREALAccess().getFullStopKeyword_1()); }
	'.'
	{ after(grammarAccess.getREALAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__REAL__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getREALAccess().getINTTerminalRuleCall_2()); }
	RULE_INT
	{ after(grammarAccess.getREALAccess().getINTTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BuildingProgram__ProcessesAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBuildingProgramAccess().getProcessesProcessParserRuleCall_0()); }
		ruleProcess
		{ after(grammarAccess.getBuildingProgramAccess().getProcessesProcessParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__ValueAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getValueINTTerminalRuleCall_3_0()); }
		RULE_INT
		{ after(grammarAccess.getVariableDeclarationAccess().getValueINTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddFloorProcess__StructureAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddFloorProcessAccess().getStructureWholeStructureEnumRuleCall_0_0()); }
		ruleWholeStructure
		{ after(grammarAccess.getAddFloorProcessAccess().getStructureWholeStructureEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddFloorProcess__LevelsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddFloorProcessAccess().getLevelsAdditionParserRuleCall_2_0()); }
		ruleAddition
		{ after(grammarAccess.getAddFloorProcessAccess().getLevelsAdditionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PaintProcess__LevelsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPaintProcessAccess().getLevelsAdditionParserRuleCall_3_0()); }
		ruleAddition
		{ after(grammarAccess.getPaintProcessAccess().getLevelsAdditionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PaintProcess__ColorAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPaintProcessAccess().getColorIDTerminalRuleCall_6_0()); }
		RULE_ID
		{ after(grammarAccess.getPaintProcessAccess().getColorIDTerminalRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddWindowProcess__NumAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddWindowProcessAccess().getNumAdditionParserRuleCall_1_0()); }
		ruleAddition
		{ after(grammarAccess.getAddWindowProcessAccess().getNumAdditionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddWindowProcess__LevelsAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddWindowProcessAccess().getLevelsAdditionParserRuleCall_5_0()); }
		ruleAddition
		{ after(grammarAccess.getAddWindowProcessAccess().getLevelsAdditionParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__CountAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoopAccess().getCountAdditionParserRuleCall_0_0()); }
		ruleAddition
		{ after(grammarAccess.getLoopAccess().getCountAdditionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__ProcessesAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoopAccess().getProcessesProcessParserRuleCall_3_0()); }
		ruleProcess
		{ after(grammarAccess.getLoopAccess().getProcessesProcessParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionAccess().getOperatorAlternatives_1_1_0()); }
		(rule__Addition__OperatorAlternatives_1_1_0)
		{ after(grammarAccess.getAdditionAccess().getOperatorAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_2_0()); }
		ruleMultiplication
		{ after(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationAccess().getOperatorAlternatives_1_1_0()); }
		(rule__Multiplication__OperatorAlternatives_1_1_0)
		{ after(grammarAccess.getMultiplicationAccess().getOperatorAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationAccess().getRightPrimaryParserRuleCall_1_2_0()); }
		rulePrimary
		{ after(grammarAccess.getMultiplicationAccess().getRightPrimaryParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntLiteral__ValAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntLiteralAccess().getValINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getIntLiteralAccess().getValINTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RealLiteral__ValAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRealLiteralAccess().getValREALParserRuleCall_0()); }
		ruleREAL
		{ after(grammarAccess.getRealLiteralAccess().getValREALParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntVarExpression__VarAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntVarExpressionAccess().getVarVariableDeclarationCrossReference_0()); }
		(
			{ before(grammarAccess.getIntVarExpressionAccess().getVarVariableDeclarationIDTerminalRuleCall_0_1()); }
			RULE_ID
			{ after(grammarAccess.getIntVarExpressionAccess().getVarVariableDeclarationIDTerminalRuleCall_0_1()); }
		)
		{ after(grammarAccess.getIntVarExpressionAccess().getVarVariableDeclarationCrossReference_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
