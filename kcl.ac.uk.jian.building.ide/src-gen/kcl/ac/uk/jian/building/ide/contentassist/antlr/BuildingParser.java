/*
 * generated by Xtext 2.20.0
 */
package kcl.ac.uk.jian.building.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import kcl.ac.uk.jian.building.ide.contentassist.antlr.internal.InternalBuildingParser;
import kcl.ac.uk.jian.building.services.BuildingGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class BuildingParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(BuildingGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, BuildingGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getProcessAccess().getAlternatives(), "rule__Process__Alternatives");
			builder.put(grammarAccess.getAdditionAccess().getOperatorAlternatives_1_1_0(), "rule__Addition__OperatorAlternatives_1_1_0");
			builder.put(grammarAccess.getMultiplicationAccess().getOperatorAlternatives_1_1_0(), "rule__Multiplication__OperatorAlternatives_1_1_0");
			builder.put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
			builder.put(grammarAccess.getWholeStructureAccess().getAlternatives(), "rule__WholeStructure__Alternatives");
			builder.put(grammarAccess.getVariableDeclarationAccess().getGroup(), "rule__VariableDeclaration__Group__0");
			builder.put(grammarAccess.getAddFloorProcessAccess().getGroup(), "rule__AddFloorProcess__Group__0");
			builder.put(grammarAccess.getPaintProcessAccess().getGroup(), "rule__PaintProcess__Group__0");
			builder.put(grammarAccess.getAddWindowProcessAccess().getGroup(), "rule__AddWindowProcess__Group__0");
			builder.put(grammarAccess.getLoopAccess().getGroup(), "rule__Loop__Group__0");
			builder.put(grammarAccess.getAdditionAccess().getGroup(), "rule__Addition__Group__0");
			builder.put(grammarAccess.getAdditionAccess().getGroup_1(), "rule__Addition__Group_1__0");
			builder.put(grammarAccess.getMultiplicationAccess().getGroup(), "rule__Multiplication__Group__0");
			builder.put(grammarAccess.getMultiplicationAccess().getGroup_1(), "rule__Multiplication__Group_1__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_3(), "rule__Primary__Group_3__0");
			builder.put(grammarAccess.getREALAccess().getGroup(), "rule__REAL__Group__0");
			builder.put(grammarAccess.getBuildingProgramAccess().getProcessesAssignment(), "rule__BuildingProgram__ProcessesAssignment");
			builder.put(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1(), "rule__VariableDeclaration__NameAssignment_1");
			builder.put(grammarAccess.getVariableDeclarationAccess().getValueAssignment_3(), "rule__VariableDeclaration__ValueAssignment_3");
			builder.put(grammarAccess.getAddFloorProcessAccess().getStructureAssignment_0(), "rule__AddFloorProcess__StructureAssignment_0");
			builder.put(grammarAccess.getAddFloorProcessAccess().getLevelsAssignment_2(), "rule__AddFloorProcess__LevelsAssignment_2");
			builder.put(grammarAccess.getPaintProcessAccess().getLevelsAssignment_3(), "rule__PaintProcess__LevelsAssignment_3");
			builder.put(grammarAccess.getPaintProcessAccess().getColorAssignment_6(), "rule__PaintProcess__ColorAssignment_6");
			builder.put(grammarAccess.getAddWindowProcessAccess().getNumAssignment_1(), "rule__AddWindowProcess__NumAssignment_1");
			builder.put(grammarAccess.getAddWindowProcessAccess().getLevelsAssignment_5(), "rule__AddWindowProcess__LevelsAssignment_5");
			builder.put(grammarAccess.getLoopAccess().getCountAssignment_0(), "rule__Loop__CountAssignment_0");
			builder.put(grammarAccess.getLoopAccess().getProcessesAssignment_3(), "rule__Loop__ProcessesAssignment_3");
			builder.put(grammarAccess.getAdditionAccess().getOperatorAssignment_1_1(), "rule__Addition__OperatorAssignment_1_1");
			builder.put(grammarAccess.getAdditionAccess().getRightAssignment_1_2(), "rule__Addition__RightAssignment_1_2");
			builder.put(grammarAccess.getMultiplicationAccess().getOperatorAssignment_1_1(), "rule__Multiplication__OperatorAssignment_1_1");
			builder.put(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2(), "rule__Multiplication__RightAssignment_1_2");
			builder.put(grammarAccess.getIntLiteralAccess().getValAssignment(), "rule__IntLiteral__ValAssignment");
			builder.put(grammarAccess.getRealLiteralAccess().getValAssignment(), "rule__RealLiteral__ValAssignment");
			builder.put(grammarAccess.getIntVarExpressionAccess().getVarAssignment(), "rule__IntVarExpression__VarAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private BuildingGrammarAccess grammarAccess;

	@Override
	protected InternalBuildingParser createParser() {
		InternalBuildingParser result = new InternalBuildingParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public BuildingGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(BuildingGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
